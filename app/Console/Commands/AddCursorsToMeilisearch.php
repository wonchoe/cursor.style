<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Http;
use App\Models\CursorTagTranslation;
use App\Support\CollectionPresenter;
use App\Support\CursorPresenter;

class AddCursorsToMeilisearch extends Command
{
    protected $signature = 'custom:meilisearchAddCursors {--force : Drop and recreate each index before pushing data}';
    protected $description = 'Push all translated cursors and tags to Meilisearch for all languages';

    protected $languages = [
        'en', 'am', 'ar', 'bg', 'bn', 'ca', 'cs', 'da', 'de', 'el', 'es', 'et', 'fa', 'fi', 'fil', 'fr', 'gu', 'he',
        'hi', 'hr', 'hu', 'id', 'it', 'ja', 'kn', 'ko', 'lt', 'lv', 'ml', 'mr', 'ms', 'nl', 'no', 'pl', 'pt', 'ro', 'ru',
        'sk', 'sl', 'sr', 'sv', 'sw', 'ta', 'te', 'th', 'tr', 'uk', 'vi', 'zh'
    ];

    public function handle()
    {
        $force = $this->option('force');

        $this->info("\n‚ú® –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫—É—Ä—Å–æ—Ä–∏ –∑ —Ç–µ–≥–∞–º–∏ —É Meilisearch –¥–ª—è –≤—Å—ñ—Ö –º–æ–≤...");
        if ($force) {
            $this->warn("‚ö†Ô∏è  –£–≤—ñ–º–∫–Ω–µ–Ω–æ —Ä–µ–∂–∏–º --force: —ñ–Ω–¥–µ–∫—Å–∏ –±—É–¥—É—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—â–µ–Ω—ñ –ø–µ—Ä–µ–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º\n");
        }

        foreach ($this->languages as $lang) {
            app()->setLocale($lang);
            $this->info("üåç –ú–æ–≤–∞: $lang");

            $tagged = CursorTagTranslation::with('cursor.collection')
                ->where(function ($q) use ($lang) {
                    $q->where('lang', $lang)
                    ->orWhere(function ($q2) use ($lang) {
                        $q2->where('lang', 'en')->whereNotIn('cursor_id', function ($q3) use ($lang) {
                            $q3->select('cursor_id')
                                ->from('cursor_tag_translations')
                                ->where('lang', $lang);
                        });
                    });
                })
                ->get();

            $this->info("üîç –ó–Ω–∞–π–¥–µ–Ω–æ " . $tagged->count() . " –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è [$lang]");
            $documents = [];

            foreach ($tagged as $item) {
                if (!$item->cursor) continue;

                $name = trans("cursors.c_{$item->cursor_id}", [], $lang);
                if ($name === "cursors.c_{$item->cursor_id}") {
                    $name = $item->cursor->name_en;
                }

                $catAlt = optional($item->cursor->collection)->alt_name;
                $catKey = "collections.{$catAlt}";
                $catTranslated = trans($catKey, [], $lang);

                if ($catTranslated === $catKey) {
                    $catName = optional($item->cursor->collection)->base_name_en;
                } else {
                    $catName = $catTranslated;
                }

                // --- –î–æ–¥–∞—î–º–æ SEO URL-–∏
                $seoCursor = CursorPresenter::seo($item->cursor); // –º–∞—î –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ slug, slug_url_final —Ç–æ—â–æ
                $seoCollection = null;
                if ($item->cursor->collection) {
                    $seoCollection = CollectionPresenter::seo($item->cursor->collection);
                    $collection_url = route('collection.show', [
                        'id' => $item->cursor->collection,
                        'slug' => $seoCollection['trans'],
                    ]);                      
                }
            

                $item->cursor->details_url = route('collection.cursor.details', [
                    'cat' => $item->cursor->cat,
                    'collection_slug' => $seoCursor['catTrans'],
                    'id' => $item->cursor->id,
                    'cursor_slug' => $seoCursor['cursorTrans'],
                ]);

                $documents[] = [
                    'id' => $item->cursor_id,
                    'name' => $name,
                    'tags' => $item->tags,
                    'lang' => $lang,
                    'isFallback' => $item->lang !== $lang ? true : false,
                    'cat' => optional($item->cursor->collection)->alt_name,
                    'catid' => optional($item->cursor->collection)->id,
                    'cat_name' => $catName,
                    'cat_img' => optional($item->cursor->collection)->img,
                    'c_file' => $item->cursor->c_file,
                    'p_file' => $item->cursor->p_file,
                    'offsetX' => $item->cursor->offsetX,
                    'offsetY' => $item->cursor->offsetY,
                    'offsetX_p' => $item->cursor->offsetX_p,
                    'offsetY_p' => $item->cursor->offsetY_p,
                    'created_at' => $item->cursor->created_at->toDateTimeString(),
                    // –ù–æ–≤—ñ –ø–æ–ª—è ‚Üì‚Üì‚Üì
                    'cursor_url' => $item->cursor->details_url ?? '', // –∞–±–æ details_url, —è–∫—â–æ —î
                    'collection_url' => $collection_url ?? '',
                ];
            }

            $this->info("üîç –î–æ —ñ–º–ø–æ—Ä—Ç—É: " . count($documents) . " –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è [$lang]");

            if (!empty($documents)) {
                $hosts = [
                    'http://localhost:7700',
                    'http://meilisearch:7700',
                ];

                // –Ø–∫—â–æ --force, –¥—Ä–æ–ø–∞—î–º–æ —ñ–Ω–¥–µ–∫—Å –Ω–∞ –≤—Å—ñ—Ö —Ö–æ—Å—Ç–∞—Ö
                if ($force) {
                    foreach ($hosts as $host) {
                        try {
                            Http::withHeaders([
                                'Authorization' => 'Bearer masterKey123',
                            ])->delete("{$host}/indexes/cursors_{$lang}");
                            $this->line("üßπ –Ü–Ω–¥–µ–∫—Å [$lang] –æ—á–∏—â–µ–Ω–æ –Ω–∞ {$host}");
                        } catch (\Exception $e) {
                            // –ú–æ–∂–µ –±—É—Ç–∏ 404 ‚Äî –æ–∫
                        }
                    }
                }

                // –°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω–¥–µ–∫—Å —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ–º–∞ (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ 404)
                $indexCreated = false;
                foreach ($hosts as $host) {
                    try {
                        $getResponse = Http::withHeaders([
                            'Authorization' => 'Bearer masterKey123',
                        ])->get("{$host}/indexes/cursors_{$lang}");

                        if ($getResponse->status() === 404) {
                            // POST, –∞ –Ω–µ PUT!
                            Http::withHeaders([
                                'Authorization' => 'Bearer masterKey123',
                                'Content-Type' => 'application/json',
                            ])->post("{$host}/indexes", [
                                'uid' => "cursors_{$lang}",
                                'primaryKey' => 'id',
                            ]);
                            $this->line("üì¶ –Ü–Ω–¥–µ–∫—Å [$lang] —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ primaryKey 'id' —á–µ—Ä–µ–∑ {$host}");
                        } else {
                            $this->line("‚ÑπÔ∏è –Ü–Ω–¥–µ–∫—Å [$lang] –≤–∂–µ —ñ—Å–Ω—É—î –Ω–∞ {$host}");
                        }
                        $indexCreated = true;
                        $activeHost = $host;
                        break;
                    } catch (\Exception $e) {
                        continue;
                    }
                }

                if (!$indexCreated) {
                    $this->error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–±–æ –∑–Ω–∞–π—Ç–∏ —ñ–Ω–¥–µ–∫—Å –¥–ª—è [$lang] ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ü—é –º–æ–≤—É.");
                    continue;
                }

                // –ó–∞–ª–∏–≤–∞—Ç–∏ –±–∞—Ç—á–∞–º–∏ –ø–æ 500 –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
                $chunks = array_chunk($documents, 500);
                foreach ($chunks as $chunk) {
                    try {
                        $response = Http::withHeaders([
                            'Authorization' => 'Bearer masterKey123',
                            'Content-Type' => 'application/json',
                        ])->timeout(10)->post("{$activeHost}/indexes/cursors_{$lang}/documents", $chunk);

                        if ($response->successful()) {
                            $this->info("‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –±–∞—Ç—á –∑ " . count($chunk) . " –∫—É—Ä—Å–æ—Ä—ñ–≤ —É —ñ–Ω–¥–µ–∫—Å [$lang] —á–µ—Ä–µ–∑ {$activeHost}");
                        } else {
                            $this->error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–∞—Ç—á–∞ —É —ñ–Ω–¥–µ–∫—Å [$lang] —á–µ—Ä–µ–∑ {$activeHost}");
                            // $this->error($response->body());
                        }
                    } catch (\Exception $e) {
                        $this->error("‚ùå Exception –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –±–∞—Ç—á–∞ —É —ñ–Ω–¥–µ–∫—Å [$lang]: " . $e->getMessage());
                    }
                }
            } else {
                $this->info("‚ö†Ô∏è –ù–µ–º–∞—î —Ç–µ–≥—ñ–≤ –¥–ª—è –º–æ–≤–∏ [$lang]\n");
            }
        }

        $this->info("\nüéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫—É—Ä—Å–æ—Ä—ñ–≤ —É Meilisearch –¥–ª—è –≤—Å—ñ—Ö –º–æ–≤.\n");
        return 0;
    }
}
